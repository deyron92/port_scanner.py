# port_scanner.py

import socket
import argparse
import json
from datetime import datetime

def scan_target(target_ip, start_port, end_port):
    print(f"\nStarting scan on {target_ip} from port {start_port} to {end_port}...")
    open_ports = []
    try:
        for port in range(start_port, end_port + 1):
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(0.5)
                result = sock.connect_ex((target_ip, port))
                if result == 0:
                    open_ports.append(port)
        return open_ports
    except KeyboardInterrupt:
        print("\nScan interrupted by user.")
    except socket.gaierror:
        print("\nHostname could not be resolved.")
    except socket.error:
        print("\nCouldn't connect to server.")
    return open_ports

def parse_args():
    parser = argparse.ArgumentParser(description="Python TCP Port Scanner")
    parser.add_argument('--host', type=str, help='Target host IP or domain')
    parser.add_argument('--start', type=int, help='Start port')
    parser.add_argument('--end', type=int, help='End port')
    parser.add_argument('--json', action='store_true', help='Output results in JSON format')
    return parser.parse_args()

def main():
    args = parse_args()

    if args.host and args.start and args.end:
        target = args.host
        start_port = args.start
        end_port = args.end
    else:
        print("""
        ==============================
         PYTHON TCP PORT SCANNER TOOL
        ==============================
        Follow the prompts below:
          • Target Host (IP or domain)
          • Start Port
          • End Port
        """)
        target = input("Enter target IP address or hostname: ")
        start_port = int(input("Enter start port: "))
        end_port = int(input("Enter end port: "))

    try:
        ip = socket.gethostbyname(target)
        print(f"\nResolved {target} to {ip}")
    except socket.gaierror:
        print("\nError: Unable to resolve hostname.")
        return

    start_time = datetime.now()
    open_ports = scan_target(ip, start_port, end_port)
    end_time = datetime.now()
    duration = end_time - start_time

    if args.json:
        print(json.dumps({
            "target": ip,
            "open_ports": open_ports,
            "scan_duration": str(duration)
        }, indent=2))
    else:
        print("\nScan complete.")
        print(f"Open ports on {ip}: {open_ports if open_ports else 'None found'}")
        print(f"Duration: {duration}")

if __name__ == "__main__":
    main()
